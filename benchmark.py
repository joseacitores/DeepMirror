#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Sep 16 15:33:57 2022@author: josemiguelacitores"""from tdc.benchmark_group import admet_groupfrom DeepPurpose.utils import data_process, generate_configfrom sklearn.metrics import roc_auc_score, mean_squared_errorimport numpy as npfrom models import *def benchmark_models(dataset_names, models):    '''benchmarks several models given their names in the selected datasets from TDC    ADME datasets'''        group = admet_group(path = 'data/')    predictions_list = []    true_vals = []        dataset_names = ['caco2_wang',                     'hia_hou',                     'pgp_broccatelli',                     'bioavailability_ma',                     'lipophilicity_astrazeneca',                     'solubility_aqsoldb',                     'bbb_martins',                     'ppbr_az',                     'vdss_lombardo',                     'cyp2d6_veith',                     'cyp3a4_veith',                     'cyp2c9_veith',                     'cyp2d6_substrate_carbonmangels',                     'cyp3a4_substrate_carbonmangels',                     'cyp2c9_substrate_carbonmangels',                     'half_life_obach',                     'clearance_microsome_az',                     'clearance_hepatocyte_az']    dataset_names = ['caco2_wang']        models = [Transformer()]#,GCN(),Transformer()]        for model in models:        for seed in [1,2,3,4,5]:            predictions = {}            y_true = {}                        for name in dataset_names:                ## --- train your model --- ##                benchmark = group.get(name)                train_val, train_val_y, test, test_y = model.featurize(benchmark, name)                                model.train(train_val, train_val_y)                                ### Generate Predictions on the Test Set ###                y_pred = model.predict(test)                y_true[name] = test_y                predictions[name] = y_pred            predictions_list.append(predictions)            true_vals.append(y_true)            group.evaluate_many(predictions_list)    # mean_squared_error(true_vals[0],predictions_list[0])        # {'caco2_wang': [6.328, 0.101], 'hia_hou': [0.5, 0.01], ...}