#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Sep 16 15:33:57 2022@author: josemiguelacitores"""from tdc.benchmark_group import admet_groupdef benchmark_models(models, dataset_names=None):    '''benchmarks the given models on the selected datasets from TDC    ADME datasets'''        group = admet_group(path = 'data/')    predictions_list = []    evals = {}        if dataset_names is None:        dataset_names = ['caco2_wang',                         'hia_hou',                         'pgp_broccatelli',                         'bioavailability_ma',                         'lipophilicity_astrazeneca',                         'solubility_aqsoldb',                         'bbb_martins',                         'ppbr_az',                         'vdss_lombardo',                         'cyp2d6_veith',                         'cyp3a4_veith',                         'cyp2c9_veith',                         'cyp2d6_substrate_carbonmangels',                         'cyp3a4_substrate_carbonmangels',                         'cyp2c9_substrate_carbonmangels',                         'half_life_obach',                         'clearance_microsome_az',                         'clearance_hepatocyte_az']        for model in models:        for seed in [1,2,3,4,5]:            predictions = {}            y_true = {}                        for name in dataset_names:                ## --- train your model --- ##                benchmark = group.get(name)                train_val, train_val_y, test, test_y = model.featurize(benchmark, name)                                model.train(train_val, train_val_y)                                ### Generate Predictions on the Test Set ###                y_pred = model.predict(test)                y_true[name] = test_y                predictions[name] = y_pred            predictions_list.append(predictions)                evals[model] = group.evaluate_many(predictions_list)        return evals