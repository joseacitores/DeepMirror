#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Sep 16 15:33:57 2022@author: josemiguelacitores"""from tdc.benchmark_group import admet_groupfrom DeepPurpose.utils import data_process, generate_configfrom sklearn.metrics import roc_auc_score, mean_squared_errorimport numpy as npfrom models import *group = admet_group(path = 'data/')predictions_list = []true_vals = []drug_encoding = 'MPNN'dataset_names = ['caco2_wang',                 'hia_hou',                 'pgp_broccatelli',                 'bioavailability_ma',                 'lipophilicity_astrazeneca',                 'solubility_aqsoldb',                 'bbb_martins',                 'ppbr_az',                 'vdss_lombardo',                 'cyp2d6_veith',                 'cyp3a4_veith',                 'cyp2c9_veith',                 'cyp2d6_substrate_carbonmangels',                 'cyp3a4_substrate_carbonmangels',                 'cyp2c9_substrate_carbonmangels',                 'half_life_obach',                 'clearance_microsome_az',                 'clearance_hepatocyte_az']dataset_names = ['caco2_wang']models = [Tree()]#,GCN(),Transformer()]for model in models:    for seed in [1]:        predictions = {}        y_true = {}                for name in dataset_names:            benchmark = group.get(name)             train_val, test = benchmark['train_val'], benchmark['test']            train_val_y = train_val.Y            test_y = test.Y                        ## --- train your model --- ##            train_val, test = model.featurize(train_val, test)                        model.train(train_val, train_val_y)                        ### Generate Predictions on the Test Set ###            y_pred = model.predict(test)            y_true[name] = test_y            predictions[name] = y_pred        predictions_list.append(predictions)        true_vals.append(y_true)    mean_squared_error(true_vals[0],predictions_list[0])# {'caco2_wang': [6.328, 0.101], 'hia_hou': [0.5, 0.01], ...}#%%from DeepPurpose import utils, CompoundPredfrom tdc.single_pred import ADMEfrom tdc.utils import retrieve_dataset_namesadme_datasets = retrieve_dataset_names('ADME')predictions = {}for dataset_name in adme_datasets:    X, y = ADME(name = dataset_name).get_data(format = 'DeepPurpose')    drug_encoding = 'Morgan'    train, val, test = utils.data_process(X_drug = X,                                       y = y,                                       drug_encoding = drug_encoding,                                      random_seed = 'TDC')    config = utils.generate_config(drug_encoding = drug_encoding,                          train_epoch = 5,                          LR = 0.001,                          batch_size = 128,                         mpnn_hidden_size = 32,                         mpnn_depth = 2                        )    model = CompoundPred.model_initialize(**config)    model.train(train, val, test)    predictions[name] = model.predict(test)#%%from tdc.benchmark_group import admet_groupfrom DeepPurpose import CompoundPred as modelsfrom DeepPurpose.utils import data_process, generate_configfrom sklearn.metrics import roc_auc_scoreimport numpy as npgroup = admet_group(path = 'data/')predictions_list = []true_vals = []drug_encoding = 'MPNN'dataset_names = ['caco2_wang',                 'hia_hou',                 'pgp_broccatelli',                 'bioavailability_ma',                 'lipophilicity_astrazeneca',                 'solubility_aqsoldb',                 'bbb_martins',                 'ppbr_az',                 'vdss_lombardo',                 'cyp2d6_veith',                 'cyp3a4_veith',                 'cyp2c9_veith',                 'cyp2d6_substrate_carbonmangels',                 'cyp3a4_substrate_carbonmangels',                 'cyp2c9_substrate_carbonmangels',                 'half_life_obach',                 'clearance_microsome_az',                 'clearance_hepatocyte_az']dataset_names = ['hia_hou']for seed in [1]:    predictions = {}    y_true = {}        for name in dataset_names:        benchmark = group.get(name)         train_val, test = benchmark['train_val'], benchmark['test']        train, valid = group.get_train_valid_split(benchmark = name, split_type = 'default', seed = seed)                train = data_process(X_drug = train.Drug.values, y = train.Y.values, drug_encoding = drug_encoding, split_method='no_split')        val = data_process(X_drug = valid.Drug.values, y = valid.Y.values, drug_encoding = drug_encoding, split_method='no_split')        test = data_process(X_drug = benchmark['test'].Drug.values, y = benchmark['test'].Y.values, drug_encoding = drug_encoding, split_method='no_split')        config = utils.generate_config(drug_encoding = drug_encoding,                             train_epoch = 5,                              LR = 0.001,                              batch_size = 128,                             mpnn_hidden_size = 32,                             mpnn_depth = 2                            )        model = CompoundPred.model_initialize(**config)        model.train(train, val, test)        predictions[name] = model.predict(test)        y_true[name] = test.Label    predictions_list.append(predictions)    true_vals.append(y_true)group.evaluate(predictions_list[0])roc_auc_score(np.array(true_vals[0]['hia_hou']),predictions_list[0]['hia_hou'])# {'caco2_wang': [6.328, 0.101], 'hia_hou': [0.5, 0.01], ...}